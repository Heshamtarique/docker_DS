containers:
    its a way to package applications with all the necessary dependencies and configration.
    portable artifact... easy to share and move this package to any env 
    this makes the development and depoyment ease, sort of streamlininig the process.
    synced and efficient 
    moving table, bed one by one from one house to another house while shifting is not advisable
    thus- make a container and move from one env to another env
    dev env package can be run to QA env this will help in mitigating the dependency, package issues
    Docker is one such platform for creating this kind of containers

Docker Image:
    MyApp: [dependencies & configration, mongoDB]
    |
    |
    container: -conmbination of layers of images
        they will have layers of images: 
        ------------------------
        | MongoDB image
        ------------------------
        | Anaconda image
        ------------------------
        | python 3.8 image
        ------------------------
        | linux Base Image - small size
        ------------------------

    combiantion of entier layers of images is called DOCKER IMAGE


Running this docker image will create a container which is an env within this env
it will try to run this application 


DOCKER                              CONTAINER
------------------------------------------------------------------------
package or artifact                 docker iamge--> run

we can move the above               start the application
package/artifact                    create a container --> env

------------------------------------------------------------------------
docker images are very small... bcs same thing can be done from Virtual Machine.



---------------
application layer
---------------
OS kernal layer
---------------
Hardaware
---------------

only application part is called everytime by some new use as compared to 
VM(both app layer & OS kernal is called). Making Docker faster. 
VM can be installed on any OS, but with docker there is a compatibility issue

-----------------
Commands that will be used in docker file
FROM baseImage
COPY --> all the files and folders from my floder will be copied into this
WORKDIR --> working directory
RUN
CMD

docker image will be created by using the above commands

to build an image --> docker build -t welcome-app .
to see that the image has been created --> docker iamges
running the docker image --> 
    1: host port 
    2: container port


we will get 2 outputs 
 * Running on http://127.0.0.1:5001
 * Running on http://172.17.0.2:5001

 first will work, second will be running inside the image

terminal command to build a docker image

    method1    * docker build -t heshamtarique/welcome-app .
    method2    * docker tag heshamtarique/welcome-app heshamtarique/welcome-app 
        docker images --> to  see the images 
        docker ps
    removing a docker image
        * docker iamge rm -f heshamtarique/welcome-app
    pushing a docker image
        * docker push heshamtarique/welcome-app2:latest
    pull from docker image
        * docker pull heshamtarique/welcome-app:latest

-------------------------------------------------
Docker compose:
    if i have an app running as a container... if this web app wants to use MySQL, Redis, or mongoDB... 
    its not possible to run them in one container.. so separate containers for MySQL, Redis, mongoDB
    Docker compose is used for defining and running multi container docker applications. 
    we define:
        docoker-compose.yml file
        